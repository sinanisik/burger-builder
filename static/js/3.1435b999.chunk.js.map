{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["CheckoutSummary","props","className","classes","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","validationError","ValidationError","Label","label","module","exports"],"mappings":"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","file":"static/js/3.1435b999.chunk.js","sourcesContent":["import React from \"react\";\n\nimport Burger from \"../../Burger/Burger\";\nimport Button from \"../../UI/Button/Button\";\nimport classes from \"./CheckoutSummary.module.css\";\n\nconst CheckoutSummary = (props) => {\n  return (\n    <div className={classes.CheckoutSummary}>\n      <h1>We hope it tastes well!</h1>\n      <div style={{ width: \"100%\", margin: \"auto\" }}>\n        <Burger ingredients={props.ingredients} />\n      </div>\n      <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>\n        CANCEL\n      </Button>\n      <Button btnType=\"Success\" clicked={props.checkoutContinued}>\n        CONTINUE\n      </Button>\n    </div>\n  );\n};\n\nexport default CheckoutSummary;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"../../../components/UI/Button/Button\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport classes from \"./ContactData.module.css\";\nimport axios from \"../../../axios-orders\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\nimport * as actions from \"../../../store/actions/index\";\nimport { updateObject, checkValidity } from \"../../../shared/utility\";\n\nclass ContactData extends Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Your Name\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      street: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Street\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      zipCode: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"ZIP Code\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 5,\n          maxLength: 5,\n        },\n        valid: false,\n        touched: false,\n      },\n      country: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Country\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n      },\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Your E-Mail\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      deliveryMethod: {\n        elementType: \"select\",\n        elementConfig: {\n          options: [\n            {\n              value: \"fastest\",\n              displayValue: \"Fastest\",\n            },\n            {\n              value: \"cheapest\",\n              displayValue: \"Cheapest\",\n            },\n          ],\n        },\n        value: \"fastest\",\n        validation: {},\n        valid: true,\n      },\n    },\n    formIsValid: false,\n  };\n\n  orderHandler = (event) => {\n    event.preventDefault();\n\n    const formData = {};\n    for (let formElementIdentifier in this.state.orderForm) {\n      formData[formElementIdentifier] = this.state.orderForm[\n        formElementIdentifier\n      ].value;\n    }\n    const order = {\n      ingredients: this.props.ings,\n      price: this.props.price,\n      orderData: formData,\n      userId: this.props.userId,\n    };\n\n    this.props.onOrderBurger(order, this.props.token);\n  };\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    // const updatedOrderForm = {\n    //   ...this.state.orderForm,\n    // };\n    // const updatedFormElement = { ...updatedOrderForm[inputIdentifier] };\n\n    // updatedFormElement.value = event.target.value;\n    // updatedFormElement.valid = this.checkValidity(\n    //   updatedFormElement.value,\n    //   updatedFormElement.validation\n    // );\n    // updatedFormElement.touched = true;\n    // updatedOrderForm[inputIdentifier] = updatedFormElement;\n\n    const updatedFormElement = updateObject(\n      this.state.orderForm[inputIdentifier],\n      {\n        value: event.target.value,\n        valid: checkValidity(\n          event.target.value,\n          this.state.orderForm[inputIdentifier].validation\n        ),\n        touched: true,\n      }\n    );\n\n    const updatedOrderForm = updateObject(this.state.orderForm, {\n      [inputIdentifier]: updatedFormElement,\n    });\n\n    let formIsValid = true;\n    for (let inputIdentifier in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    }\n\n    this.setState({\n      orderForm: updatedOrderForm,\n      formIsValid: formIsValid,\n    });\n  };\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key],\n      });\n    }\n    let form = (\n      <form onSubmit={this.orderHandler}>\n        {formElementsArray.map((formElement) => {\n          return (\n            <Input\n              key={formElement.id}\n              elementType={formElement.config.elementType}\n              elementConfig={formElement.config.elementConfig}\n              value={formElement.config.value}\n              invalid={!formElement.config.valid}\n              shouldValidate={formElement.config.validation}\n              touched={formElement.config.touched}\n              changed={(event) =>\n                this.inputChangedHandler(event, formElement.id)\n              }\n            />\n          );\n        })}\n\n        <Button btnType=\"Success\" disabled={!this.state.formIsValid}>\n          ORDER\n        </Button>\n      </form>\n    );\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n    return (\n      <div className={classes.ContactData}>\n        <h4>Enter your Contact Data</h4>\n        {form}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onOrderBurger: (orderData, token) =>\n      dispatch(actions.purchaseBurger(orderData, token)),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withErrorHandler(ContactData, axios));\n","import React, { Component } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\nimport ContactData from \"./ContactData/ContactData\";\n\nclass Checkout extends Component {\n  checkoutCancelledHandler = () => {\n    this.props.history.goBack();\n  };\n\n  checkoutContinuedHandler = () => {\n    this.props.history.replace(\"/checkout/contact-data\");\n  };\n\n  render() {\n    // if user directly goes to the /checkout/contact-data page, it will redirected to homepage (\"/\")\n    let summary = <Redirect to=\"/\" />;\n\n    if (this.props.ings) {\n      const purchasedRedirect = this.props.purchased ? (\n        <Redirect to=\"/\" />\n      ) : null;\n      summary = (\n        <div>\n          {purchasedRedirect}\n          <CheckoutSummary\n            ingredients={this.props.ings}\n            checkoutCancelled={this.checkoutCancelledHandler}\n            checkoutContinued={this.checkoutContinuedHandler}\n          />\n          <Route\n            path={this.props.match.path + \"/contact-data\"}\n            component={ContactData}\n          />\n        </div>\n      );\n    }\n    return summary;\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    purchased: state.order.purchased,\n  };\n};\n\nexport default connect(mapStateToProps)(Checkout);\n","import React from \"react\";\n\nimport classes from \"./Input.module.css\";\n\nconst Input = (props) => {\n  let inputElement = null;\n  const inputClasses = [classes.InputElement];\n\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid);\n  }\n\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"select\":\n      inputElement = (\n        <select\n          className={inputClasses.join(\" \")}\n          value={props.value}\n          onChange={props.changed}\n        >\n          {props.elementConfig.options.map((option) => {\n            return (\n              <option key={option.value} value={option.value}>\n                {option.displayValue}\n              </option>\n            );\n          })}\n        </select>\n      );\n      break;\n    default:\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n  }\n\n  let validationError = null;\n  if (props.invalid && props.touched) {\n    validationError = (\n      <p className={classes.ValidationError}>Please enter a valid value!</p>\n    );\n  }\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}>{props.label}</label>\n      {inputElement}\n      {validationError}\n    </div>\n  );\n};\n\nexport default Input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\",\"ValidationError\":\"Input_ValidationError__qMR97\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\"};"],"sourceRoot":""}